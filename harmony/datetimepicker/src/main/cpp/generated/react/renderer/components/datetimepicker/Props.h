
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GeneratePropsH.js
 */
#pragma once

#include <react/renderer/components/view/ViewProps.h>
#include <react/renderer/core/PropsParserContext.h>
#include <react/renderer/graphics/Color.h>

namespace facebook {
namespace react {

enum class RNDateTimePickerViewMode { Date, Time, Datetime, Countdown };

static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, RNDateTimePickerViewMode &result) {
  auto string = (std::string)value;
  if (string == "date") { result = RNDateTimePickerViewMode::Date; return; }
  if (string == "time") { result = RNDateTimePickerViewMode::Time; return; }
  if (string == "datetime") { result = RNDateTimePickerViewMode::Datetime; return; }
  if (string == "countdown") { result = RNDateTimePickerViewMode::Countdown; return; }
  abort();
}

static inline std::string toString(const RNDateTimePickerViewMode &value) {
  switch (value) {
    case RNDateTimePickerViewMode::Date: return "date";
    case RNDateTimePickerViewMode::Time: return "time";
    case RNDateTimePickerViewMode::Datetime: return "datetime";
    case RNDateTimePickerViewMode::Countdown: return "countdown";
  }
}
enum class RNDateTimePickerViewThemeVariant { Dark, Light, Unspecified };

static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, RNDateTimePickerViewThemeVariant &result) {
  auto string = (std::string)value;
  if (string == "dark") { result = RNDateTimePickerViewThemeVariant::Dark; return; }
  if (string == "light") { result = RNDateTimePickerViewThemeVariant::Light; return; }
  if (string == "unspecified") { result = RNDateTimePickerViewThemeVariant::Unspecified; return; }
  abort();
}

static inline std::string toString(const RNDateTimePickerViewThemeVariant &value) {
  switch (value) {
    case RNDateTimePickerViewThemeVariant::Dark: return "dark";
    case RNDateTimePickerViewThemeVariant::Light: return "light";
    case RNDateTimePickerViewThemeVariant::Unspecified: return "unspecified";
  }
}
enum class RNDateTimePickerViewDisplayIOS { Default, Spinner, Compact, Inline };

static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, RNDateTimePickerViewDisplayIOS &result) {
  auto string = (std::string)value;
  if (string == "default") { result = RNDateTimePickerViewDisplayIOS::Default; return; }
  if (string == "spinner") { result = RNDateTimePickerViewDisplayIOS::Spinner; return; }
  if (string == "compact") { result = RNDateTimePickerViewDisplayIOS::Compact; return; }
  if (string == "inline") { result = RNDateTimePickerViewDisplayIOS::Inline; return; }
  abort();
}

static inline std::string toString(const RNDateTimePickerViewDisplayIOS &value) {
  switch (value) {
    case RNDateTimePickerViewDisplayIOS::Default: return "default";
    case RNDateTimePickerViewDisplayIOS::Spinner: return "spinner";
    case RNDateTimePickerViewDisplayIOS::Compact: return "compact";
    case RNDateTimePickerViewDisplayIOS::Inline: return "inline";
  }
}

class RNDateTimePickerViewProps final : public ViewProps {
 public:
  RNDateTimePickerViewProps() = default;
  RNDateTimePickerViewProps(const PropsParserContext& context, const RNDateTimePickerViewProps &sourceProps, const RawProps &rawProps);

#pragma mark - Props

  double maximumDate{0.0};
  double minimumDate{0.0};
  double date{0.0};
  std::string locale{};
  int minuteInterval{0};
  RNDateTimePickerViewMode mode{RNDateTimePickerViewMode::Date};
  double timeZoneOffsetInMinutes{0.0};
  std::string timeZoneName{};
  SharedColor textColor{};
  SharedColor accentColor{};
  RNDateTimePickerViewThemeVariant themeVariant{RNDateTimePickerViewThemeVariant::Unspecified};
  RNDateTimePickerViewDisplayIOS displayIOS{RNDateTimePickerViewDisplayIOS::Default};
  bool is24Hour{true};
  bool enabled{true};
};

} // namespace react
} // namespace facebook
